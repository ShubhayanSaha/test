https://git-rba.hackerrank.com/git/7200cb6c-3795-4721-a064-13805a30e752,



--- Functional Interface

import java.util.Arrays;
import java.util.List;
import java.util.function.Predicate;
public class App {
   public static void main(String args[]){
      List<Integer> list = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9);
      System.out.println("Print even numbers:");
      eval(list, n-> n%2 == 0 );
   }
   public static void eval(List<Integer> list, Predicate<Integer> predicate) {
      for(Integer n: list) {		
         if(predicate.test(n)) {
            System.out.println(n + " ");
         }
      }
   }
}

NOTE :--

Predicate: The Predicate interface has an abstract method test which gives a Boolean value as a result for the specified argument. Its prototype is
public interface Predicate
{
   public boolean test(T  t);
 }


BinaryOperator: The BinaryOperator interface has an abstract method apply which takes two argument and returns a result of same type. Its prototype is
public interface BinaryOperator 
{
     public T apply(T x, T y);
}

       
Function: The Function interface has an abstract method apply which takes argument of type T and returns a result of type R. Its prototype is
public interface Function 
{
   public R apply(T t);
}

Example of Functional Interface
---------------------------------------

1. Predicate - Functional Interface
public interface Predicate<T>
Method Detail:

boolean test(T t)

Evaluates this predicate on the given argument.

Parameters:

t - the input argument

Returns: true if the input argument matches the predicate, otherwise false



2.Consumer - Functional Interface
public interface Consumer<T>
Method Detail:

void accept(T t)

Accepts a single argument and does not return any value.

Parameters:

T - the type of the input to the operation



3.Supplier - Functional Interface
public interface Supplier<T>
Method Detail:

T get()

Accepts no arguments but it returns a value.

Returns:

T - the type of results supplied by this Supplier.




Method References - Types
---------------------------------

Reference to a static method

Ex - ContainingClass::staticMethodName

Syntax - Class::staticMethodName

Reference to an instance method of a particular object

Ex - containingObject::instanceMethodName

Syntax - object::instanceMethodName

Reference to an instance method of an arbitrary object of a particular type

Ex - ContainingType::methodName

Syntax - Class::instanceMethodName

Reference to a constructor

Ex - ClassName::new

Syntax - ClassName::new



class Car {
  private int id;
  private String color;
}
class Mechanic {
  public void fix(Car c) {
    System.out.println("Fixing car " + c.getId());
  }
}
public void execute(Car car, Consumer<Car> c) {
  c.accept(car);
}
final Mechanic mechanic = new Mechanic();
Car car = new Car();


// Using an anonymous class
execute(car, new Consumer<Car>() {
  public void accept(Car c) {
    mechanic.fix(c);
  }
});

// Using a lambda expression
execute(car, c -> mechanic.fix(c));

// Using a method reference
execute(car, mechanic::fix);


Stream API
---------------------

String firstMatchedName = memberNames.stream()

                .filter((s) -> s.startsWith("L"))

                .findFirst().get();

System.out.println(firstMatchedName);


Parallel Streams
-----------------

double average = roster
    .parallelStream()
    .filter(p -> p.getGender() == Person.Sex.MALE)
    .mapToInt(Person::getAge)
    .average()
    .getAsDouble();




NOTE:-


Different Operations On Streams-

Intermediate Operations:

map: The map method is used to returns a stream consisting of the results of applying the given function to the elements of this stream.
List number = Arrays.asList(2,3,4,5);
List square = number.stream().map(x->x*x).collect(Collectors.toList());

filter: The filter method is used to select elements as per the Predicate passed as argument.
List names = Arrays.asList("Reflection","Collection","Stream");
List result = names.stream().filter(s->s.startsWith("S")).collect(Collectors.toList());

sorted: The sorted method is used to sort the stream.
List names = Arrays.asList("Reflection","Collection","Stream");
List result = names.stream().sorted().collect(Collectors.toList());



Terminal Operations:


collect: The collect method is used to return the result of the intermediate operations performed on the stream.
List number = Arrays.asList(2,3,4,5,3);
Set square = number.stream().map(x->x*x).collect(Collectors.toSet());

forEach: The forEach method is used to iterate through every element of the stream.
List number = Arrays.asList(2,3,4,5);
number.stream().map(x->x*x).forEach(y->System.out.println(y));

reduce: The reduce method is used to reduce the elements of a stream to a single value.
The reduce method takes a BinaryOperator as a parameter.
List number = Arrays.asList(2,3,4,5);
int even = number.stream().filter(x->x%2==0).reduce(0,(ans,i)-> ans+i);

Here ans variable is assigned 0 as the initial value and i is added to it . 




//a simple program to demonstrate the use of stream in java 
import java.util.*; 
import java.util.stream.*; 
  
class Demo 
{ 
  public static void main(String args[]) 
  { 
  
    // create a list of integers 
    List<Integer> number = Arrays.asList(2,3,4,5); 
  
    // demonstration of map method 
    List<Integer> square = number.stream().map(x -> x*x). 
                           collect(Collectors.toList()); 
    System.out.println(square); 
  
    // create a list of String 
    List<String> names = 
                Arrays.asList("Reflection","Collection","Stream"); 
  
    // demonstration of filter method 
    List<String> result = names.stream().filter(s->s.startsWith("S")). 
                          collect(Collectors.toList()); 
    System.out.println(result); 
  
    // demonstration of sorted method 
    List<String> show = 
            names.stream().sorted().collect(Collectors.toList()); 
    System.out.println(show); 
  
    // create a list of integers 
    List<Integer> numbers = Arrays.asList(2,3,4,5,2); 
  
    // collect method returns a set 
    Set<Integer> squareSet = 
         numbers.stream().map(x->x*x).collect(Collectors.toSet()); 
    System.out.println(squareSet); 
  
    // demonstration of forEach method 
    number.stream().map(x->x*x).forEach(y->System.out.println(y)); 
  
    // demonstration of reduce method 
    int even = 
       number.stream().filter(x->x%2==0).reduce(0,(ans,i)-> ans+i); 
  
    System.out.println(even); 
  } 
} 



Output:

[4, 9, 16, 25]
[Stream]
[Collection, Reflection, Stream]
[16, 4, 9, 25]
4
9
16
25
6




--------------------------------------------------------------------------------

 import java.util.Optional;  
    public class App {  
        public static void main(String[] args) {  
            String[] str = new String[10];        
            str[5] = null;;
            str[4] = "JAVA OPTIONAL CLASS EXAMPLE";
            Optional<String> checkNull = Optional.ofNullable(str[5]);  
            if(checkNull.isPresent()){  // It Checks, value is present or not  
                String lowercaseString = str[5].toLowerCase();  
                System.out.print(lowercaseString);  
            }else  
                System.out.println("String value is not present");  
        }  
    }  